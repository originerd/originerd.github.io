{"data":{"markdownRemark":{"excerpt":"2017년을 맞으며 를 쓰며 정리했던 목표 중 하나인 글쓰기를 하기 위해 분위기를 전환할 겸 블로그를 세팅하기로 했다. 마치 시험기간에 안 하던 집 청소를 하는 느낌이지만, 뭐 어때? :) Github Pages는 지킬( Jekyll…","frontmatter":{"date":"2017-01-21T21:42:14.000Z","tags":["hexo","github","pages","헥소","깃헙","페이지"],"title":"헥소 설정기"},"html":"<p><a href=\"/posts/at-beginning-of-2017/\">2017년을 맞으며</a>를 쓰며 정리했던 목표 중 하나인 글쓰기를 하기 위해 분위기를 전환할 겸 블로그를 세팅하기로 했다. 마치 시험기간에 안 하던 집 청소를 하는 느낌이지만, 뭐 어때? :)</p>\n<p>Github Pages는 지킬(<a href=\"https://jekyllrb.com/\">Jekyll</a>)이 대표적으로 사용된다. 작년에 한 번 회사 블로그를 세팅할 때 설정해봤다. 또한, 루비를 좋아하기 때문에 좋은 선택이었을 수 있다. 그런데 지킬은 이미 레거시라는 이야기를 들었고(귀가 얇진 않은데...), 헥소(<a href=\"https://hexo.io/\">Hexo</a>)가 그 다음 후보였다. 헥소는 Node.js로 구동되는데, 최근에는 루비보다 자바스크립트를 많이 쓰게 돼서, 오히려 루비보다 자바스크립트가 편하게 느껴진다. 따라서 헥소로 결정!</p>\n<p>헥소를 설정하는 게 정말 어렵지 않은데, 제대로 설정하려고 하다보니 시행착오를 많이 겪었다. 글로 남겨두면 헥소로 블로그를 세팅하실 분들에게 조금이나마 도움이 되지 않을까하여 글을 쓴다. 설정을 해두니 헥소의 장점들이 많이 보인다. 추천!</p>\n<h2>헥소 설정하기</h2>\n<p><em>Node.js 패키지 매니저(<a href=\"https://www.npmjs.com/\">npm</a>/<a href=\"https://yarnpkg.com/\">yarn</a>)는 설치되어 있다고 가정하고 진행합니다.</em></p>\n<ol>\n<li>\n<p>헥소 커맨드 라인 인터페이스 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i hexo-cli -g <span class=\"token comment\"># for npm</span>\n<span class=\"token function\">yarn</span> global <span class=\"token function\">add</span> hexo-cli <span class=\"token comment\"># for yarn</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>블로그 생성 및 패키지 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">hexo init <span class=\"token operator\">&lt;</span>blog<span class=\"token operator\">></span>\n<span class=\"token function\">cd</span> <span class=\"token operator\">&lt;</span>blog<span class=\"token operator\">></span>\n<span class=\"token function\">npm</span> i <span class=\"token comment\"># for npm</span>\n<span class=\"token function\">yarn</span> <span class=\"token comment\"># for yarn</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li><code class=\"language-text\">&lt;blog&gt;</code> 위치에 블로그 이름으로 변경해도 된다.</li>\n<li><code class=\"language-text\">hexo init</code>까지만 입력 시 현재 디렉토리에 블로그 파일들이 생성된다.</li>\n</ul>\n</li>\n<li>\n<p>헥소 실행해보기</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">hexo server</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ul>\n<li>헥소는 기본적으로 4000번 포트로 실행된다. 따라서 <a href=\"http://localhost:4000\">http://localhost:4000</a> 로 접근할 수 있다. 커맨드 실행 시 <code class=\"language-text\">-o</code> 옵션을 사용하면, 서버를 실행하고 자동으로 브라우저로 연결시켜준다.</li>\n<li>Hello World라는 글이 자동으로 생성되는데, <code class=\"language-text\">./source/_posts</code> 디렉토리 내에 있다. 삭제하면 끝!</li>\n</ul>\n</li>\n<li>\n<p>헥소 설정</p>\n<ul>\n<li>헥소 설정은 <code class=\"language-text\">./_config.yml</code> 파일에서 할 수 있다. 내용이 꽤 직관적이어서 기초는 쉽게 설정할 수 있다.</li>\n<li>더 자세한 내용은 <a href=\"https://hexo.io/ko/docs/configuration.html\">여기</a>를 참고</li>\n</ul>\n</li>\n<li>\n<p>글 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">hexo new <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ul>\n<li><code class=\"language-text\">&lt;title&gt;</code> 위치에 원하는 제목을 입력한다.</li>\n<li>제목이 공백을 포함하면 따옴표로 묶는다.</li>\n</ul>\n</li>\n<li>\n<p>테마 설정</p>\n<ul>\n<li>다른 곳에도 있겠지만, 공식 사이트에서 <a href=\"https://hexo.io/themes/\">리스트</a>를 제공한다.</li>\n<li>\n<p><code class=\"language-text\">./themes/&lt;theme name&gt;</code> 디렉토리에 저장하면 된다.</p>\n<ul>\n<li>테마 파일 자체를 넣어도 되고, git submodule 등으로 관리해도 된다.</li>\n</ul>\n</li>\n<li>테마를 적용하기 위해서는 <code class=\"language-text\">./_config.yml</code>에서 <code class=\"language-text\">theme: &lt;theme name&gt;</code>을 설정하면 된다.</li>\n</ul>\n</li>\n<li>\n<p>배포하기 (Github Pages)</p>\n<ol>\n<li>Github에 <code class=\"language-text\">계정명.github.io</code>로 repository를 생성한다.</li>\n<li>\n<p>Git에 배포하기 위해 패키지를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i --save hexo-deployer-git</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">./_config.yml</code>의 <code class=\"language-text\">deploy</code>를 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yml line-numbers\"><code class=\"language-yml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> &lt;repository url<span class=\"token punctuation\">></span>\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>branch<span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">message</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li><code class=\"language-text\">&lt;repository url&gt;</code>에 1번에서 생성한 Github repository 주소를 입력한다.</li>\n<li><code class=\"language-text\">[branch]</code> 및 <code class=\"language-text\">[message]</code>를 설정하지 않으면 기본적으로 알아서 판단해서 설정이 된다. 혹은 원하는 설정을 입력하면 된다.</li>\n</ul>\n</li>\n<li>\n<p>배포하자!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">hexo deploy -g</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ul>\n<li>정적 파일을 생성 후 Github repository에 배포를 한다. <code class=\"language-text\">-g</code> 옵션이 정적 파일 생성하는 옵션이다.</li>\n<li>위 옵션을 붙이지 않으면 현재 생성되어 있는 정적 파일을 올리게 된다.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<p>이로써 설치 및 글 작성, 배포를 할 수 있다. 쉽다! 보다 자세한 설명은 <a href=\"https://hexo.io/ko/\">공식 사이트</a>를 참고하면 좋다. 심지어 한글 문서도 잘 되어 있으니, 누구든 쉽게 접할 수 있을 것 같다.</p>\n<p>하지만, 아직 시행착오를 겪으며 생긴 노하우를 전하지 않았다.</p>\n<h2>(반드시 알 필요는 없는) 노하우</h2>\n<p>위의 과정을 다 따라했으면, 어떻게 배포가 이루어지는지 알 것이다. 정적 파일을 생성해 Github Pages에 배포를 하게 된다. 그러나, 정적 파일을 제외한 부분은 관리를 하기 어렵다. 이에 대한 (거창한 표현인 것 같지만)노하우가 있다.</p>\n<ol>\n<li>Git 브랜치를 master 외의 다른 브랜치로 옮긴다.</li>\n<li>Github repository로 push한다.</li>\n<li>Github repository에 접근한다.</li>\n<li>Settings - Branches로 이동한다.</li>\n<li>새로 올린 브랜치를 Default branch로 설정한다.</li>\n</ol>\n<p>이제, 해당 Github repository에 접근하면 설정 파일 및 마크다운으로 작성된 글들이 기본적으로 보이게 된다. master는 오로지 배포용으로만 사용할 수 있고 설정 파일과 정적 파일을 분리함으로써 관리를 효율적으로 할 수 있다! Awesome!</p>"},"site":{"siteMetadata":{"title":"Originerd"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/how-i-set-hexo/"}}