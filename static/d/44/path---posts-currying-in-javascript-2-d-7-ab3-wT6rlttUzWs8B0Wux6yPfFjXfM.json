{"data":{"markdownRemark":{"excerpt":"얼마 전  Curring in JavaScript 를 알게 되었다.  NodeSchool 에 공개되어 있는 코스로, JavaScript에서 currying 하는 방법을 알려준다. 총 6개의 문제로 구성되어 있고, currying…","frontmatter":{"date":"2017-01-29T20:38:26.000Z","tags":["Currying","JavaScript","커링","자바스크립트"],"title":"Currying in JavaScript"},"html":"<p>얼마 전 <a href=\"https://github.com/kishorsharma/currying-workshopper\">Curring in JavaScript</a>를 알게 되었다. <a href=\"https://nodeschool.io/\">NodeSchool</a>에 공개되어 있는 코스로, JavaScript에서 currying 하는 방법을 알려준다. 총 6개의 문제로 구성되어 있고, currying의 기초를 습득하기 좋은 것 같다.</p>\n<p>이것을 시작하는 방법은 매우 간단하다.</p>\n<ol>\n<li>\n<p>설치</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -g currying-workshopper <span class=\"token comment\"># for npm</span>\nyarn global add currying-workshopper <span class=\"token comment\"># for yarn</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>시작</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">curry</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>\n<p>키보드 방향키 혹은 <code class=\"language-text\">j</code>, <code class=\"language-text\">k</code>로 커서를 이동할 수 있으며, <code class=\"language-text\">Enter</code> 키를 통해 문제를 선택할 수 있다.</p>\n</li>\n<li>\n<p>문제 풀기</p>\n<ul>\n<li>문제 선택 시 터미널 창에 문제 및 설명이 출력되고, 이를 만족하는 코드를 작성하면 된다.</li>\n</ul>\n</li>\n<li>\n<p>답안 제출</p>\n<ul>\n<li>작성한 코드를 파일로 저장한다.</li>\n<li>\n<p>답안을 제출한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">curry verify <span class=\"token operator\">&lt;</span>filename<span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>문제를 다 풀 때까지 위 과정 반복</p>\n</li>\n</ol>\n<p>JavaScript를 다루며 사용하게 되는 것들이 많았고, 알아두면 분명 도움이 될 내용들이다. 이미 알고 있는 내용들이 있어서 생각보다 쉽게 해결할 수 있었던 것 같다. 아래는 내가 작성한 답안인데, 이 코스를 진행할 분들은 문제를 풀고 확인하면 좋을 것 같다.</p>\n<ol>\n<li>\n<p>IDENTITY</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">identity</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> args<span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> identity<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>BINARY</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">binary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> args<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc <span class=\"token operator\">+</span> e<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> binary<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>DELAY INVOCATION</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">delayInvocation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> delayInvocation<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>LONG DELAY INVOCATION</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">longDelayInvocation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">invocationIter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> e <span class=\"token operator\">?</span> <span class=\"token function\">invocationIter</span><span class=\"token punctuation\">(</span>acc <span class=\"token operator\">+</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> acc<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">invocationIter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> longDelayInvocation<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>CALL AND APPLY</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> callAndApply <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  caller<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> nameArg<span class=\"token punctuation\">,</span> ageArg<span class=\"token punctuation\">,</span> tShirtSizeArg<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> nameArg<span class=\"token punctuation\">,</span> ageArg<span class=\"token punctuation\">,</span> tShirtSizeArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  applier<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> argumentsArr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> argumentsArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> callAndApply<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>CURRY FUNCTION</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">curryFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arity <span class=\"token operator\">=</span> fx<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">curryIter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    args<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> arity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> curryIter<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fx</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> curryIter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> curryFunction<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n</ol>"},"site":{"siteMetadata":{"title":"Originerd"}}},"pageContext":{"slug":"/posts/currying-in-javascript/"}}