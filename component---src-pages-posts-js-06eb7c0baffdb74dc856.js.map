{"version":3,"sources":["webpack:///./src/pages/posts.js"],"names":["Posts","_ref2","_ref2$data","data","edges","allMarkdownRemark","title","site","siteMetadata","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_5__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","lang","className","map","edge","node","_ref","excerpt","fields","frontmatter","id","key","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","slug","propTypes","PropTypes","shape","arrayOf","string","date","tags","array","isRequired","pageQuery"],"mappings":"uNAiBMA,EAAQ,SAAAC,GAAA,IAAAC,EAAAD,EACZE,KACuBC,EAFXF,EAEVG,kBAAqBD,MAEHE,EAJRJ,EAGVK,KACEC,aAAgBF,MAJR,OAQZG,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQJ,MAAK,YAAcA,GACzBG,EAAAC,EAAAC,cAAA,QAAMG,KAAK,QAEbL,EAAAC,EAAAC,cAAA,QAAMI,UAAU,gCACDX,EAAMY,IAAI,SAAAC,GAAI,OAAIA,EAAKC,OAtBlCF,IAAI,SAAAG,GAAA,IAAGC,EAAHD,EAAGC,QAASC,EAAZF,EAAYE,OAAQC,EAApBH,EAAoBG,YAAaC,EAAjCJ,EAAiCI,GAAjC,OACRd,EAAAC,EAAAC,cAAA,WAASI,UAAU,OAAOS,IAAKD,GAC7Bd,EAAAC,EAAAC,cAACc,EAAA,KAAD,CAAMC,GAAIL,EAAOM,MACflB,EAAAC,EAAAC,cAAA,UAAKW,EAAYhB,QAEnBG,EAAAC,EAAAC,cAAA,SAAIS,SAsBVpB,EAAM4B,UAAY,CAChBzB,KAAM0B,IAAUC,MAAM,CACpBzB,kBAAmBwB,IAAUC,MAAM,CACjC1B,MAAOyB,IAAUE,QACfF,IAAUC,MAAM,CACdZ,KAAMW,IAAUC,MAAM,CACpBV,QAASS,IAAUG,OACnBX,OAAQQ,IAAUC,MAAM,CACtBH,KAAME,IAAUG,SAElBV,YAAaO,IAAUC,MAAM,CAC3BG,KAAMJ,IAAUG,OAChBE,KAAML,IAAUM,MAChB7B,MAAOuB,IAAUG,SAEnBT,GAAIM,IAAUG,cAKtBzB,KAAMsB,IAAUC,MAAM,CACpBtB,aAAcqB,IAAUC,MAAM,CAC5BxB,MAAOuB,IAAUG,OAAOI,kBAMzB,IAAMC,EAAS,YA6BPrC","file":"component---src-pages-posts-js-06eb7c0baffdb74dc856.js","sourcesContent":["import Helmet from 'react-helmet'\nimport { graphql, Link } from 'gatsby'\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Layout from '../components/Layout'\n\nconst renderPosts = posts =>\n  posts.map(({ excerpt, fields, frontmatter, id }) => (\n    <article className=\"card\" key={id}>\n      <Link to={fields.slug}>\n        <h2>{frontmatter.title}</h2>\n      </Link>\n      <p>{excerpt}</p>\n    </article>\n  ))\n\nconst Posts = ({\n  data: {\n    allMarkdownRemark: { edges },\n    site: {\n      siteMetadata: { title },\n    },\n  },\n}) => (\n  <Layout>\n    <Helmet title={`Posts :: ${title}`}>\n      <html lang=\"en\" />\n    </Helmet>\n    <main className=\"container container--article\">\n      {renderPosts(edges.map(edge => edge.node))}\n    </main>\n  </Layout>\n)\n\nPosts.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            excerpt: PropTypes.string,\n            fields: PropTypes.shape({\n              slug: PropTypes.string,\n            }),\n            frontmatter: PropTypes.shape({\n              date: PropTypes.string,\n              tags: PropTypes.array,\n              title: PropTypes.string,\n            }),\n            id: PropTypes.string,\n          }),\n        })\n      ),\n    }),\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n  }),\n}\n\nexport const pageQuery = graphql`\n  query Posts {\n    allMarkdownRemark(\n      filter: { fields: { slug: { regex: \"/^/posts/*/\" } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            tags\n            date(formatString: \"YYYY/MM/DD\")\n          }\n          id\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n\nexport default Posts\n"],"sourceRoot":""}