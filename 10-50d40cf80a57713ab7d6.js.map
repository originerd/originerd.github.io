{"version":3,"sources":["webpack:///./node_modules/moment-timezone/index.js","webpack:///./node_modules/moment-timezone/moment-timezone.js"],"names":["module","exports","__webpack_require__","tz","load","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","undefined","apply","this","moment","cachedGuess","zones","links","names","guesses","version","logError","momentVersion","split","major","minor","charCodeToInt","charCode","unpackBase60","string","i","parts","whole","fractional","multiplier","out","sign","charCodeAt","length","arrayToInt","array","mapIndices","source","indices","unpack","data","offsets","untils","Math","round","Infinity","intToUntil","name","abbrs","population","Zone","packedString","_set","OffsetAt","at","timeString","toTimeString","abbr","match","join","offset","getTimezoneOffset","ZoneScore","zone","offsetScore","abbrScore","findChange","low","high","mid","diff","Date","sortZoneScores","a","b","addToGuesses","guessesForUserOffsets","j","guessesOffset","offsetsLength","filteredGuesses","hasOwnProperty","push","rebuildGuess","intlName","Intl","DateTimeFormat","resolvedOptions","timeZone","normalizeName","e","zoneScore","change","next","startYear","getFullYear","last","userOffsets","zoneScores","getZone","scoreOffsetAt","sort","toLowerCase","replace","addZone","packed","normalized","caller","link","addLink","aliases","alias","normal0","normal1","needsOffset","m","isUnixTimestamp","_f","_a","_tzm","message","console","error","input","args","Array","prototype","slice","call","arguments","utc","isMoment","add","parse","unpacked","_index","timestamp","target","offsetNext","offsetPrev","max","moveAmbiguousForward","moveInvalidForward","mom","utcOffset","offsetAt","abs","dataVersion","_zones","_links","_names","zoneExists","didShowError","guess","ignoreCache","old","fn","abbrWrap","_z","resetZoneWrap","defaultZone","updateOffset","keepTime","_isUTC","_d","z","Error","zoneName","zoneAbbr","local","setDefault","momentProperties","Object","toString"],"mappings":"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","file":"10-50d40cf80a57713ab7d6.js","sourcesContent":["var moment = module.exports = require(\"./moment-timezone\");\r\nmoment.tz.load(require('./data/packed/latest.json'));\r\n","//! moment-timezone.js\r\n//! version : 0.5.25\r\n//! Copyright (c) JS Foundation and other contributors\r\n//! license : MIT\r\n//! github.com/moment/moment-timezone\r\n\r\n(function (root, factory) {\r\n\t\"use strict\";\r\n\r\n\t/*global define*/\r\n\tif (typeof module === 'object' && module.exports) {\r\n\t\tmodule.exports = factory(require('moment')); // Node\r\n\t} else if (typeof define === 'function' && define.amd) {\r\n\t\tdefine(['moment'], factory);                 // AMD\r\n\t} else {\r\n\t\tfactory(root.moment);                        // Browser\r\n\t}\r\n}(this, function (moment) {\r\n\t\"use strict\";\r\n\r\n\t// Do not load moment-timezone a second time.\r\n\t// if (moment.tz !== undefined) {\r\n\t// \tlogError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);\r\n\t// \treturn moment;\r\n\t// }\r\n\r\n\tvar VERSION = \"0.5.25\",\r\n\t\tzones = {},\r\n\t\tlinks = {},\r\n\t\tnames = {},\r\n\t\tguesses = {},\r\n\t\tcachedGuess;\r\n\r\n\tif (!moment || typeof moment.version !== 'string') {\r\n\t\tlogError('Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/');\r\n\t}\r\n\r\n\tvar momentVersion = moment.version.split('.'),\r\n\t\tmajor = +momentVersion[0],\r\n\t\tminor = +momentVersion[1];\r\n\r\n\t// Moment.js version check\r\n\tif (major < 2 || (major === 2 && minor < 6)) {\r\n\t\tlogError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');\r\n\t}\r\n\r\n\t/************************************\r\n\t\tUnpacking\r\n\t************************************/\r\n\r\n\tfunction charCodeToInt(charCode) {\r\n\t\tif (charCode > 96) {\r\n\t\t\treturn charCode - 87;\r\n\t\t} else if (charCode > 64) {\r\n\t\t\treturn charCode - 29;\r\n\t\t}\r\n\t\treturn charCode - 48;\r\n\t}\r\n\r\n\tfunction unpackBase60(string) {\r\n\t\tvar i = 0,\r\n\t\t\tparts = string.split('.'),\r\n\t\t\twhole = parts[0],\r\n\t\t\tfractional = parts[1] || '',\r\n\t\t\tmultiplier = 1,\r\n\t\t\tnum,\r\n\t\t\tout = 0,\r\n\t\t\tsign = 1;\r\n\r\n\t\t// handle negative numbers\r\n\t\tif (string.charCodeAt(0) === 45) {\r\n\t\t\ti = 1;\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\t// handle digits before the decimal\r\n\t\tfor (i; i < whole.length; i++) {\r\n\t\t\tnum = charCodeToInt(whole.charCodeAt(i));\r\n\t\t\tout = 60 * out + num;\r\n\t\t}\r\n\r\n\t\t// handle digits after the decimal\r\n\t\tfor (i = 0; i < fractional.length; i++) {\r\n\t\t\tmultiplier = multiplier / 60;\r\n\t\t\tnum = charCodeToInt(fractional.charCodeAt(i));\r\n\t\t\tout += num * multiplier;\r\n\t\t}\r\n\r\n\t\treturn out * sign;\r\n\t}\r\n\r\n\tfunction arrayToInt (array) {\r\n\t\tfor (var i = 0; i < array.length; i++) {\r\n\t\t\tarray[i] = unpackBase60(array[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction intToUntil (array, length) {\r\n\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\tarray[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds\r\n\t\t}\r\n\r\n\t\tarray[length - 1] = Infinity;\r\n\t}\r\n\r\n\tfunction mapIndices (source, indices) {\r\n\t\tvar out = [], i;\r\n\r\n\t\tfor (i = 0; i < indices.length; i++) {\r\n\t\t\tout[i] = source[indices[i]];\r\n\t\t}\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\tfunction unpack (string) {\r\n\t\tvar data = string.split('|'),\r\n\t\t\toffsets = data[2].split(' '),\r\n\t\t\tindices = data[3].split(''),\r\n\t\t\tuntils  = data[4].split(' ');\r\n\r\n\t\tarrayToInt(offsets);\r\n\t\tarrayToInt(indices);\r\n\t\tarrayToInt(untils);\r\n\r\n\t\tintToUntil(untils, indices.length);\r\n\r\n\t\treturn {\r\n\t\t\tname       : data[0],\r\n\t\t\tabbrs      : mapIndices(data[1].split(' '), indices),\r\n\t\t\toffsets    : mapIndices(offsets, indices),\r\n\t\t\tuntils     : untils,\r\n\t\t\tpopulation : data[5] | 0\r\n\t\t};\r\n\t}\r\n\r\n\t/************************************\r\n\t\tZone object\r\n\t************************************/\r\n\r\n\tfunction Zone (packedString) {\r\n\t\tif (packedString) {\r\n\t\t\tthis._set(unpack(packedString));\r\n\t\t}\r\n\t}\r\n\r\n\tZone.prototype = {\r\n\t\t_set : function (unpacked) {\r\n\t\t\tthis.name       = unpacked.name;\r\n\t\t\tthis.abbrs      = unpacked.abbrs;\r\n\t\t\tthis.untils     = unpacked.untils;\r\n\t\t\tthis.offsets    = unpacked.offsets;\r\n\t\t\tthis.population = unpacked.population;\r\n\t\t},\r\n\r\n\t\t_index : function (timestamp) {\r\n\t\t\tvar target = +timestamp,\r\n\t\t\t\tuntils = this.untils,\r\n\t\t\t\ti;\r\n\r\n\t\t\tfor (i = 0; i < untils.length; i++) {\r\n\t\t\t\tif (target < untils[i]) {\r\n\t\t\t\t\treturn i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tparse : function (timestamp) {\r\n\t\t\tvar target  = +timestamp,\r\n\t\t\t\toffsets = this.offsets,\r\n\t\t\t\tuntils  = this.untils,\r\n\t\t\t\tmax     = untils.length - 1,\r\n\t\t\t\toffset, offsetNext, offsetPrev, i;\r\n\r\n\t\t\tfor (i = 0; i < max; i++) {\r\n\t\t\t\toffset     = offsets[i];\r\n\t\t\t\toffsetNext = offsets[i + 1];\r\n\t\t\t\toffsetPrev = offsets[i ? i - 1 : i];\r\n\r\n\t\t\t\tif (offset < offsetNext && tz.moveAmbiguousForward) {\r\n\t\t\t\t\toffset = offsetNext;\r\n\t\t\t\t} else if (offset > offsetPrev && tz.moveInvalidForward) {\r\n\t\t\t\t\toffset = offsetPrev;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (target < untils[i] - (offset * 60000)) {\r\n\t\t\t\t\treturn offsets[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn offsets[max];\r\n\t\t},\r\n\r\n\t\tabbr : function (mom) {\r\n\t\t\treturn this.abbrs[this._index(mom)];\r\n\t\t},\r\n\r\n\t\toffset : function (mom) {\r\n\t\t\tlogError(\"zone.offset has been deprecated in favor of zone.utcOffset\");\r\n\t\t\treturn this.offsets[this._index(mom)];\r\n\t\t},\r\n\r\n\t\tutcOffset : function (mom) {\r\n\t\t\treturn this.offsets[this._index(mom)];\r\n\t\t}\r\n\t};\r\n\r\n\t/************************************\r\n\t\tCurrent Timezone\r\n\t************************************/\r\n\r\n\tfunction OffsetAt(at) {\r\n\t\tvar timeString = at.toTimeString();\r\n\t\tvar abbr = timeString.match(/\\([a-z ]+\\)/i);\r\n\t\tif (abbr && abbr[0]) {\r\n\t\t\t// 17:56:31 GMT-0600 (CST)\r\n\t\t\t// 17:56:31 GMT-0600 (Central Standard Time)\r\n\t\t\tabbr = abbr[0].match(/[A-Z]/g);\r\n\t\t\tabbr = abbr ? abbr.join('') : undefined;\r\n\t\t} else {\r\n\t\t\t// 17:56:31 CST\r\n\t\t\t// 17:56:31 GMT+0800 (台北標準時間)\r\n\t\t\tabbr = timeString.match(/[A-Z]{3,5}/g);\r\n\t\t\tabbr = abbr ? abbr[0] : undefined;\r\n\t\t}\r\n\r\n\t\tif (abbr === 'GMT') {\r\n\t\t\tabbr = undefined;\r\n\t\t}\r\n\r\n\t\tthis.at = +at;\r\n\t\tthis.abbr = abbr;\r\n\t\tthis.offset = at.getTimezoneOffset();\r\n\t}\r\n\r\n\tfunction ZoneScore(zone) {\r\n\t\tthis.zone = zone;\r\n\t\tthis.offsetScore = 0;\r\n\t\tthis.abbrScore = 0;\r\n\t}\r\n\r\n\tZoneScore.prototype.scoreOffsetAt = function (offsetAt) {\r\n\t\tthis.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);\r\n\t\tif (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {\r\n\t\t\tthis.abbrScore++;\r\n\t\t}\r\n\t};\r\n\r\n\tfunction findChange(low, high) {\r\n\t\tvar mid, diff;\r\n\r\n\t\twhile ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {\r\n\t\t\tmid = new OffsetAt(new Date(low.at + diff));\r\n\t\t\tif (mid.offset === low.offset) {\r\n\t\t\t\tlow = mid;\r\n\t\t\t} else {\r\n\t\t\t\thigh = mid;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn low;\r\n\t}\r\n\r\n\tfunction userOffsets() {\r\n\t\tvar startYear = new Date().getFullYear() - 2,\r\n\t\t\tlast = new OffsetAt(new Date(startYear, 0, 1)),\r\n\t\t\toffsets = [last],\r\n\t\t\tchange, next, i;\r\n\r\n\t\tfor (i = 1; i < 48; i++) {\r\n\t\t\tnext = new OffsetAt(new Date(startYear, i, 1));\r\n\t\t\tif (next.offset !== last.offset) {\r\n\t\t\t\tchange = findChange(last, next);\r\n\t\t\t\toffsets.push(change);\r\n\t\t\t\toffsets.push(new OffsetAt(new Date(change.at + 6e4)));\r\n\t\t\t}\r\n\t\t\tlast = next;\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < 4; i++) {\r\n\t\t\toffsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));\r\n\t\t\toffsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));\r\n\t\t}\r\n\r\n\t\treturn offsets;\r\n\t}\r\n\r\n\tfunction sortZoneScores (a, b) {\r\n\t\tif (a.offsetScore !== b.offsetScore) {\r\n\t\t\treturn a.offsetScore - b.offsetScore;\r\n\t\t}\r\n\t\tif (a.abbrScore !== b.abbrScore) {\r\n\t\t\treturn a.abbrScore - b.abbrScore;\r\n\t\t}\r\n\t\treturn b.zone.population - a.zone.population;\r\n\t}\r\n\r\n\tfunction addToGuesses (name, offsets) {\r\n\t\tvar i, offset;\r\n\t\tarrayToInt(offsets);\r\n\t\tfor (i = 0; i < offsets.length; i++) {\r\n\t\t\toffset = offsets[i];\r\n\t\t\tguesses[offset] = guesses[offset] || {};\r\n\t\t\tguesses[offset][name] = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction guessesForUserOffsets (offsets) {\r\n\t\tvar offsetsLength = offsets.length,\r\n\t\t\tfilteredGuesses = {},\r\n\t\t\tout = [],\r\n\t\t\ti, j, guessesOffset;\r\n\r\n\t\tfor (i = 0; i < offsetsLength; i++) {\r\n\t\t\tguessesOffset = guesses[offsets[i].offset] || {};\r\n\t\t\tfor (j in guessesOffset) {\r\n\t\t\t\tif (guessesOffset.hasOwnProperty(j)) {\r\n\t\t\t\t\tfilteredGuesses[j] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (i in filteredGuesses) {\r\n\t\t\tif (filteredGuesses.hasOwnProperty(i)) {\r\n\t\t\t\tout.push(names[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\tfunction rebuildGuess () {\r\n\r\n\t\t// use Intl API when available and returning valid time zone\r\n\t\ttry {\r\n\t\t\tvar intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n\t\t\tif (intlName && intlName.length > 3) {\r\n\t\t\t\tvar name = names[normalizeName(intlName)];\r\n\t\t\t\tif (name) {\r\n\t\t\t\t\treturn name;\r\n\t\t\t\t}\r\n\t\t\t\tlogError(\"Moment Timezone found \" + intlName + \" from the Intl api, but did not have that data loaded.\");\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\t// Intl unavailable, fall back to manual guessing.\r\n\t\t}\r\n\r\n\t\tvar offsets = userOffsets(),\r\n\t\t\toffsetsLength = offsets.length,\r\n\t\t\tguesses = guessesForUserOffsets(offsets),\r\n\t\t\tzoneScores = [],\r\n\t\t\tzoneScore, i, j;\r\n\r\n\t\tfor (i = 0; i < guesses.length; i++) {\r\n\t\t\tzoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);\r\n\t\t\tfor (j = 0; j < offsetsLength; j++) {\r\n\t\t\t\tzoneScore.scoreOffsetAt(offsets[j]);\r\n\t\t\t}\r\n\t\t\tzoneScores.push(zoneScore);\r\n\t\t}\r\n\r\n\t\tzoneScores.sort(sortZoneScores);\r\n\r\n\t\treturn zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;\r\n\t}\r\n\r\n\tfunction guess (ignoreCache) {\r\n\t\tif (!cachedGuess || ignoreCache) {\r\n\t\t\tcachedGuess = rebuildGuess();\r\n\t\t}\r\n\t\treturn cachedGuess;\r\n\t}\r\n\r\n\t/************************************\r\n\t\tGlobal Methods\r\n\t************************************/\r\n\r\n\tfunction normalizeName (name) {\r\n\t\treturn (name || '').toLowerCase().replace(/\\//g, '_');\r\n\t}\r\n\r\n\tfunction addZone (packed) {\r\n\t\tvar i, name, split, normalized;\r\n\r\n\t\tif (typeof packed === \"string\") {\r\n\t\t\tpacked = [packed];\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < packed.length; i++) {\r\n\t\t\tsplit = packed[i].split('|');\r\n\t\t\tname = split[0];\r\n\t\t\tnormalized = normalizeName(name);\r\n\t\t\tzones[normalized] = packed[i];\r\n\t\t\tnames[normalized] = name;\r\n\t\t\taddToGuesses(normalized, split[2].split(' '));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getZone (name, caller) {\r\n\t\t\r\n\t\tname = normalizeName(name);\r\n\r\n\t\tvar zone = zones[name];\r\n\t\tvar link;\r\n\r\n\t\tif (zone instanceof Zone) {\r\n\t\t\treturn zone;\r\n\t\t}\r\n\r\n\t\tif (typeof zone === 'string') {\r\n\t\t\tzone = new Zone(zone);\r\n\t\t\tzones[name] = zone;\r\n\t\t\treturn zone;\r\n\t\t}\r\n\r\n\t\t// Pass getZone to prevent recursion more than 1 level deep\r\n\t\tif (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {\r\n\t\t\tzone = zones[name] = new Zone();\r\n\t\t\tzone._set(link);\r\n\t\t\tzone.name = names[name];\r\n\t\t\treturn zone;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfunction getNames () {\r\n\t\tvar i, out = [];\r\n\r\n\t\tfor (i in names) {\r\n\t\t\tif (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {\r\n\t\t\t\tout.push(names[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn out.sort();\r\n\t}\r\n\r\n\tfunction addLink (aliases) {\r\n\t\tvar i, alias, normal0, normal1;\r\n\r\n\t\tif (typeof aliases === \"string\") {\r\n\t\t\taliases = [aliases];\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < aliases.length; i++) {\r\n\t\t\talias = aliases[i].split('|');\r\n\r\n\t\t\tnormal0 = normalizeName(alias[0]);\r\n\t\t\tnormal1 = normalizeName(alias[1]);\r\n\r\n\t\t\tlinks[normal0] = normal1;\r\n\t\t\tnames[normal0] = alias[0];\r\n\r\n\t\t\tlinks[normal1] = normal0;\r\n\t\t\tnames[normal1] = alias[1];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction loadData (data) {\r\n\t\taddZone(data.zones);\r\n\t\taddLink(data.links);\r\n\t\ttz.dataVersion = data.version;\r\n\t}\r\n\r\n\tfunction zoneExists (name) {\r\n\t\tif (!zoneExists.didShowError) {\r\n\t\t\tzoneExists.didShowError = true;\r\n\t\t\t\tlogError(\"moment.tz.zoneExists('\" + name + \"') has been deprecated in favor of !moment.tz.zone('\" + name + \"')\");\r\n\t\t}\r\n\t\treturn !!getZone(name);\r\n\t}\r\n\r\n\tfunction needsOffset (m) {\r\n\t\tvar isUnixTimestamp = (m._f === 'X' || m._f === 'x');\r\n\t\treturn !!(m._a && (m._tzm === undefined) && !isUnixTimestamp);\r\n\t}\r\n\r\n\tfunction logError (message) {\r\n\t\tif (typeof console !== 'undefined' && typeof console.error === 'function') {\r\n\t\t\tconsole.error(message);\r\n\t\t}\r\n\t}\r\n\r\n\t/************************************\r\n\t\tmoment.tz namespace\r\n\t************************************/\r\n\r\n\tfunction tz (input) {\r\n\t\tvar args = Array.prototype.slice.call(arguments, 0, -1),\r\n\t\t\tname = arguments[arguments.length - 1],\r\n\t\t\tzone = getZone(name),\r\n\t\t\tout  = moment.utc.apply(null, args);\r\n\r\n\t\tif (zone && !moment.isMoment(input) && needsOffset(out)) {\r\n\t\t\tout.add(zone.parse(out), 'minutes');\r\n\t\t}\r\n\r\n\t\tout.tz(name);\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\ttz.version      = VERSION;\r\n\ttz.dataVersion  = '';\r\n\ttz._zones       = zones;\r\n\ttz._links       = links;\r\n\ttz._names       = names;\r\n\ttz.add          = addZone;\r\n\ttz.link         = addLink;\r\n\ttz.load         = loadData;\r\n\ttz.zone         = getZone;\r\n\ttz.zoneExists   = zoneExists; // deprecated in 0.1.0\r\n\ttz.guess        = guess;\r\n\ttz.names        = getNames;\r\n\ttz.Zone         = Zone;\r\n\ttz.unpack       = unpack;\r\n\ttz.unpackBase60 = unpackBase60;\r\n\ttz.needsOffset  = needsOffset;\r\n\ttz.moveInvalidForward   = true;\r\n\ttz.moveAmbiguousForward = false;\r\n\r\n\t/************************************\r\n\t\tInterface with Moment.js\r\n\t************************************/\r\n\r\n\tvar fn = moment.fn;\r\n\r\n\tmoment.tz = tz;\r\n\r\n\tmoment.defaultZone = null;\r\n\r\n\tmoment.updateOffset = function (mom, keepTime) {\r\n\t\tvar zone = moment.defaultZone,\r\n\t\t\toffset;\r\n\r\n\t\tif (mom._z === undefined) {\r\n\t\t\tif (zone && needsOffset(mom) && !mom._isUTC) {\r\n\t\t\t\tmom._d = moment.utc(mom._a)._d;\r\n\t\t\t\tmom.utc().add(zone.parse(mom), 'minutes');\r\n\t\t\t}\r\n\t\t\tmom._z = zone;\r\n\t\t}\r\n\t\tif (mom._z) {\r\n\t\t\toffset = mom._z.utcOffset(mom);\r\n\t\t\tif (Math.abs(offset) < 16) {\r\n\t\t\t\toffset = offset / 60;\r\n\t\t\t}\r\n\t\t\tif (mom.utcOffset !== undefined) {\r\n\t\t\t\tvar z = mom._z;\r\n\t\t\t\tmom.utcOffset(-offset, keepTime);\r\n\t\t\t\tmom._z = z;\r\n\t\t\t} else {\r\n\t\t\t\tmom.zone(offset, keepTime);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tfn.tz = function (name, keepTime) {\r\n\t\tif (name) {\r\n\t\t\tif (typeof name !== 'string') {\r\n\t\t\t\tthrow new Error('Time zone name must be a string, got ' + name + ' [' + typeof name + ']');\r\n\t\t\t}\r\n\t\t\tthis._z = getZone(name);\r\n\t\t\tif (this._z) {\r\n\t\t\t\tmoment.updateOffset(this, keepTime);\r\n\t\t\t} else {\r\n\t\t\t\tlogError(\"Moment Timezone has no data for \" + name + \". See http://momentjs.com/timezone/docs/#/data-loading/.\");\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tif (this._z) { return this._z.name; }\r\n\t};\r\n\r\n\tfunction abbrWrap (old) {\r\n\t\treturn function () {\r\n\t\t\tif (this._z) { return this._z.abbr(this); }\r\n\t\t\treturn old.call(this);\r\n\t\t};\r\n\t}\r\n\r\n\tfunction resetZoneWrap (old) {\r\n\t\treturn function () {\r\n\t\t\tthis._z = null;\r\n\t\t\treturn old.apply(this, arguments);\r\n\t\t};\r\n\t}\r\n\r\n\tfunction resetZoneWrap2 (old) {\r\n\t\treturn function () {\r\n\t\t\tif (arguments.length > 0) this._z = null;\r\n\t\t\treturn old.apply(this, arguments);\r\n\t\t};\r\n\t}\r\n\r\n\tfn.zoneName  = abbrWrap(fn.zoneName);\r\n\tfn.zoneAbbr  = abbrWrap(fn.zoneAbbr);\r\n\tfn.utc       = resetZoneWrap(fn.utc);\r\n\tfn.local     = resetZoneWrap(fn.local);\r\n\tfn.utcOffset = resetZoneWrap2(fn.utcOffset);\r\n\t\r\n\tmoment.tz.setDefault = function(name) {\r\n\t\tif (major < 2 || (major === 2 && minor < 9)) {\r\n\t\t\tlogError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');\r\n\t\t}\r\n\t\tmoment.defaultZone = name ? getZone(name) : null;\r\n\t\treturn moment;\r\n\t};\r\n\r\n\t// Cloning a moment should include the _z property.\r\n\tvar momentProperties = moment.momentProperties;\r\n\tif (Object.prototype.toString.call(momentProperties) === '[object Array]') {\r\n\t\t// moment 2.8.1+\r\n\t\tmomentProperties.push('_z');\r\n\t\tmomentProperties.push('_a');\r\n\t} else if (momentProperties) {\r\n\t\t// moment 2.7.0\r\n\t\tmomentProperties._z = null;\r\n\t}\r\n\r\n\t// INJECT DATA\r\n\r\n\treturn moment;\r\n}));\r\n"],"sourceRoot":""}