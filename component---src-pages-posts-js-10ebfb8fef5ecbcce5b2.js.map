{"version":3,"sources":["webpack:///./src/pages/posts.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Header.js","webpack:///./src/components/Layout.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react_helmet__WEBPACK_IMPORTED_MODULE_0__","react_helmet__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","_components_Layout__WEBPACK_IMPORTED_MODULE_4__","Posts","_ref2","_ref2$data","data","edges","allMarkdownRemark","title","site","siteMetadata","a","createElement","lang","className","map","edge","node","_ref","excerpt","fields","frontmatter","id","key","to","slug","propTypes","PropTypes","shape","arrayOf","string","date","tags","array","isRequired","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","query","render","children","object","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","navItems","name","path","navColors","Header","currentPath","hide","siteTitle","react_default","gatsby_browser_entry","window","navItem","i","isActive","classNames","length","filter","Boolean","join","bool","moment","locale","Layout","hideHeader","Fragment","Helmet_default","components_Header","_755544856"],"mappings":"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","file":"component---src-pages-posts-js-10ebfb8fef5ecbcce5b2.js","sourcesContent":["import Helmet from 'react-helmet'\nimport { graphql, Link } from 'gatsby'\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Layout from '../components/Layout'\n\nconst renderPosts = posts =>\n  posts.map(({ excerpt, fields, frontmatter, id }) => (\n    <article className=\"card\" key={id}>\n      <Link to={fields.slug}>\n        <h2>{frontmatter.title}</h2>\n      </Link>\n      <p>{excerpt}</p>\n    </article>\n  ))\n\nconst Posts = ({\n  data: {\n    allMarkdownRemark: { edges },\n    site: {\n      siteMetadata: { title },\n    },\n  },\n}) => (\n  <Layout>\n    <Helmet title={`posts :: ${title}`}>\n      <html lang=\"en\" />\n    </Helmet>\n    <main className=\"container container--article\">\n      {renderPosts(edges.map(edge => edge.node))}\n    </main>\n  </Layout>\n)\n\nPosts.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            excerpt: PropTypes.string,\n            fields: PropTypes.shape({\n              slug: PropTypes.string,\n            }),\n            frontmatter: PropTypes.shape({\n              date: PropTypes.string,\n              tags: PropTypes.array,\n              title: PropTypes.string,\n            }),\n            id: PropTypes.string,\n          }),\n        })\n      ),\n    }),\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n  }),\n}\n\nexport const pageQuery = graphql`\n  query Posts {\n    allMarkdownRemark(\n      filter: { fields: { slug: { regex: \"/^/posts/*/\" } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            tags\n            date(formatString: \"YYYY/MM/DD\")\n          }\n          id\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n\nexport default Posts\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\n\nimport '../styles/header.css'\n\nconst navItems = [\n  { name: 'about', path: '/about/' },\n  { name: 'posts', path: '/posts/' },\n  { name: 'résumé', path: '/resume/' },\n]\nconst navColors = ['emerald', 'yellow', 'cherryred']\n\nconst renderNavLinks = () => {\n  const currentPath = typeof window !== 'undefined' && window.location.pathname\n\n  return navItems.map((navItem, i) => {\n    const isActive = currentPath === navItem.path\n    const classNames = [\n      'nav-link',\n      `nav-link--${navColors[i % navColors.length]}`,\n      isActive && 'nav-link--active',\n    ]\n\n    return (\n      <Link\n        className={classNames.filter(Boolean).join(' ')}\n        key={navItem.name}\n        to={navItem.path}\n      >\n        <h2 className=\"nav-link__content\">{navItem.name}</h2>\n      </Link>\n    )\n  })\n}\n\nconst Header = ({ hide, siteTitle }) => {\n  if (hide) {\n    return null\n  }\n\n  return (\n    <nav className=\"header\">\n      <Link className=\"nav-link\" to=\"/\">\n        <h1 className=\"nav-link__content\">{siteTitle}</h1>\n      </Link>\n      <div className=\"nav-link-group\">{renderNavLinks()}</div>\n    </nav>\n  )\n}\n\nHeader.propTypes = {\n  hide: PropTypes.bool,\n  siteTitle: PropTypes.string.isRequired,\n}\n\nexport default Header\n","import { graphql, StaticQuery } from 'gatsby'\nimport moment from 'moment'\nimport 'moment/locale/ko'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport Helmet from 'react-helmet'\n\nimport '../styles/layout.css'\nimport Header from './Header'\n\nmoment.locale('ko')\n\nconst Layout = ({ children, hideHeader }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet title={data.site.siteMetadata.title}>\n          <html lang=\"en\" />\n        </Helmet>\n        <Header hide={hideHeader} siteTitle={data.site.siteMetadata.title} />\n        {children}\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  hideHeader: PropTypes.bool,\n}\n\nexport default Layout\n"],"sourceRoot":""}